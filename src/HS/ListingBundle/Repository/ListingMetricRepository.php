<?php

namespace HS\ListingBundle\Repository;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Collections\Criteria;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\ORM\Mapping;
use HS\ListingBundle\Entity\ListingMetric;

/**
 * ListingMetricRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ListingMetricRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, ListingMetric::class);
    }

    public function addListingView($listing, $user)
	{
	    //if user is null
	    if ($user == null) {
            $findCriteria = array("user" => 'null', "listing" => $listing->getId());
        } else {
	        $findCriteria = array("user" => $user->getId(), "listing" => $listing->getId());
        }


		$listingMetric =  $this->findOneBy($findCriteria);

		if ($listingMetric == null) {
			$listingMetric = new ListingMetric();
			$listingMetric->setUser($user);
			$listingMetric->setListing($listing);
			$listingMetric->setViews($listingMetric->getViews() + 1);
			$this->getEntityManager()->persist($listingMetric);
		} else {
			$listingMetric->setViews($listingMetric->getViews() + 1);
		}

		$this->getEntityManager()->flush($listingMetric);

	}

    /**
     * Return how many time the user viewed the listing
     * @param Listing $listing
     * @param User $user
     *
     * @return type int
     */
    public function getListingViews($listing, $user)
    {
        if ($user != null) {
            $criteria = Criteria::create()
                ->where(Criteria::expr()->eq("user", $user));
            $views = $listing->getViews()->matching($criteria);
        } else {
            $views = $listing->getViews();
        }

        $count = 0;
        foreach ($views as $view) {
            $count += $view->getViews();
        }
        return $count;
    }
}
